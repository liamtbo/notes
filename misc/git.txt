.git
	git will track the folder .git is in
modified → staged → committed
git init
	initializes repo, adds .git folder
git status
	shows files modified (red) and in the staging area (green)
git rm -cached ‹file>
	removes file from staging area
git add <file>
	adds file to staging area
git commit -m "message"
	committing staged files
git log --oneline
	shows commit history

undoing things
git checkout ‹commit id>
	look at code from previous commit (read-only)
	git checkout < branch>
		get us back
	need to pushh branch before checking out new one
git revert < commit id›
	undo commit
	hit "Q, no buffer
git reset < commit id>
	--hard
		doesn't retain in code in repo resets repo to a previous commit

branches
make sure to commit before switching branches
master branch
	stable grade code (not for adding in new code until vetted)
git branch ‹new branch name>
	creates new branch
git branch -a
	shows all branches
	asterisk and green means active branch
git checkout ‹branch name>
	switch branch to work on
git branch -d ‹branch name>
	delete merged branch
git branch -D < branch name>
	delete unmerged branch
git checkout -b ‹branch name>
	creatoes new branch and switches to it
	be mindful of what branch you're branching from!
renaming branch
    git checkout old-branch-name
    git branch -m new-branch-name
   r git push origin new-branch-name
    git push origin --delete old-branch-name
    git push --set-upstream origin new-branch-name
pushing new branch
    git push origin new-branch-name

merging
be in branch want to merge into
git merge ‹merging branch>
if conflict
	open conflict file, delete what you want removed including « = »
	add, commit
	pushing
local folder → repo
	create repo on github
    git init
    git branch -M main # changes branch masters name to main
	git remote add origin ‹repo link>
		adds alias for repo link
    git add ., git commit -m "first commit"
	git push -u origin main
		pushes to repo

collaboration on github
    start in local master branch
    git pull origin master
    git checkout -b new-branch
    * edit branch *
    add, commit
    * do not merge on local master branch *
    * push branch so others can review code *
    git push origin new-branch
    * compare pull-req on github *
    merge pull requests if approved and delete new-branch

connecting to github from terminal
    ssh-keygen (in terminal)
    cd ~/.ssh
    ll
    cat id_rsa.pub
    go into github settings -> ssh/https -> add key
    git clone github@github...
    * edit stuff *
    git add .; git commit -m "update"; git push -u origin <branch>

problems and solution
    problem
        committed a file that was too large so couldn't git push
    solutions
        delete large file locally
        git add .; git commit -m "deleted large file"
        git reset --soft HEAD~<num of commits to commit before large-file commit>
            moves head pointer back 3 commits while keeping all changed in working dir
        git commit -m "squashed commit"
            consolidated all the changed from the last 3 committs to a single new commit
        git push --force
            need to use --force because changed git history

    problem
        merging
    solution
        git config pull.rebase false
        git pull
            write out git commit comment for merge, ctrl + O (save), enter (file name), ctrl+X (exit nano)
        git push
    
    problem
        changed name of remote repo, need to change remote url in local git repo
    solution
        git remote set-url origin git@github.com:liamtbo/multithreaded_banking.git
        git remote -v
        git push
